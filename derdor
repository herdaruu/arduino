#include <Keypad.h>
#include <LiquidCrystal.h>
#include <DHT.h>
#include <Stepper.h>

//keypad
const byte ROWS = 4;
const byte COLS = 4;
char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};
byte rowPins[ROWS] = {53, 52, 51, 50};
byte colPins[COLS] = {49, 48, 47, 46};
Keypad customKeypad = Keypad( makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);
char customKey;

//lcd
#define rs 2
#define en 3
#define d4 4
#define d5 5
#define d6 6
#define d7 7
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

//buzzer
#define buzz      12
#define note_7l   246.94
#define note_1    261.63
#define note_1i   277
#define note_2    293.66
#define note_2i   311
#define note_3    329.63
#define note_4    349.23
#define note_4i   370
#define note_5    392
#define note_5i   415
#define note_6    440
#define note_6i   446
#define note_7    493.88
#define note_1u   523.25
#define note_1iu  554
#define note_2u   587.33

//ultrasonic
#define echoPin 40
#define trigPin 41
#define uvcc    42
long duration;
int distance;

//led
#define lr    43
#define ly    44
#define lg    45

//dht22
#define DHTPIN 38
#define dhtvcc 39
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

//motor stepper (kuning, hitam, orange, biru)
#define IN1 22 //A 
#define IN2 23 //B
#define IN3 24 //A-
#define IN4 25 //B-
int delaystepper = 40;

//stepper rpm potensio
const int stepsPerRevolution = 100;  // change this to fit the number of steps per revolution
// for your motor
int speedstep = 0;
int stepCount = 0;  // number of steps the motor has taken
Stepper myStepper(stepsPerRevolution, 22, 24, 23, 25); //A, A-, B, B-
#define pot A0
int jedastep;
int stepspeed = 20;

//pb putih
#define pbp 36
//#define vcp 38

//pb merah
#define pbm 37
//#define vcm 40

int tekan = 0;
int jeda;
int push = 0;

void setup() {
  // put your setup code here, to run once:
  //lcd
  Serial.begin(9600);
  lcd.begin(16, 2);

  //buzzer
  pinMode(buzz, OUTPUT);

  //ultrasonic
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(uvcc, OUTPUT);
  digitalWrite(uvcc, HIGH);

  //led
  pinMode(lr, OUTPUT);
  pinMode(ly, OUTPUT);
  pinMode(lg, OUTPUT);

  //dht22
  dht.begin();
  pinMode(dhtvcc, OUTPUT);
  digitalWrite(dhtvcc, HIGH);

  //motor stepper
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  //pb putih
  pinMode(pbp, INPUT);
  //  pinMode(vcp, OUTPUT);
  //  digitalWrite(vcp, HIGH);

  //pb merah
  pinMode(pbm, INPUT);
  //  pinMode(vcm, OUTPUT);
  //  digitalWrite(vcm, HIGH);
}

void loop() {
  // put your main code here, to run repeatedly:
  while (tekan == 0) {
    awal();
  }
  while (tekan == 1) {
    lcd.clear();
    lcd.setCursor(4, 0);
    lcd.print("Menu : 1");
    lcd.setCursor(3, 1);
    lcd.print("Susu Murni");
    lagu();
    exitmenu();
  }
  while (tekan == 2) {
    lcd.clear();
    lcd.setCursor(4, 0);
    lcd.print("Menu : 2");
    lcd.setCursor(2, 1);
    lcd.print("LED Running");
    ledrun();
    exitmenu();
  }
  while (tekan == 3) {
    lcd.clear();
    lcd.setCursor(4, 0);
    lcd.print("Menu : 3");
    ultra();
    exitmenu();
  }
  while (tekan == 4) {
    lcd.clear();
    lcd.setCursor(4, 0);
    lcd.print("Menu : 4");
    suhu();
    exitmenu();
  }
  while (tekan == 5) {
    lcd.clear();
    lcd.setCursor(4, 0);
    lcd.print("Menu : 5");
    lcd.setCursor(2, 1);
    lcd.print("Stepper Kanan");
    stepkanan();
    exitmenu();
  }
  while (tekan == 6) {
    lcd.clear();
    lcd.setCursor(4, 0);
    lcd.print("Menu : 6");
    lcd.setCursor(2, 1);
    lcd.print("Stepper Kiri");
    stepkiri();
    exitmenu();
  }
  while (tekan == 7) {
    lcd.clear();
    lcd.setCursor(4, 0);
    lcd.print("Menu : 7");
    lcd.setCursor(3, 1);
    lcd.print("Pilih Arah");
    rpm();
    exitmenu();
  }
  while (tekan == 8) {
    exitmenu();
  }
  while (tekan == 9) {
    exitmenu();
  }
}

void awal() {
  lcd.clear();
  lcd.setCursor(2, 0);
  lcd.print("Poltek ATMI");
  lcd.setCursor(3, 1);
  lcd.print("Pilih Menu");
  for (jeda = 0; jeda < 1000; jeda++) {
    exitmenu();
    delay(1);
  }
  lcd.clear();
  lcd.setCursor(2, 0);
  lcd.print("Poltek ATMI");
  lcd.setCursor(1, 1);
  lcd.print("Menu 1 : Lagu");
  for (jeda = 0; jeda < 1000; jeda++) {
    exitmenu();
    delay(1);
  }
  lcd.clear();
  lcd.setCursor(2, 0);
  lcd.print("Poltek ATMI");
  lcd.setCursor(2, 1);
  lcd.print("Menu 2 : LED");
  for (jeda = 0; jeda < 1000; jeda++) {
    exitmenu();
    delay(1);
  }
  lcd.clear();
  lcd.setCursor(2, 0);
  lcd.print("Poltek ATMI");
  lcd.setCursor(1, 1);
  lcd.print("Menu 3 : Ultra");
  for (jeda = 0; jeda < 1000; jeda++) {
    exitmenu();
    delay(1);
  }
  lcd.clear();
  lcd.setCursor(2, 0);
  lcd.print("Poltek ATMI");
  lcd.setCursor(1, 1);
  lcd.print("Menu 4 : Suhu");
  for (jeda = 0; jeda < 1000; jeda++) {
    exitmenu();
    delay(1);
  }
  lcd.clear();
  lcd.setCursor(2, 0);
  lcd.print("Poltek ATMI");
  lcd.setCursor(0, 1);
  lcd.print("Menu 5 : StKanan");
  for (jeda = 0; jeda < 1000; jeda++) {
    exitmenu();
    delay(1);
  }
  lcd.clear();
  lcd.setCursor(2, 0);
  lcd.print("Poltek ATMI");
  lcd.setCursor(1, 1);
  lcd.print("Menu 6 : StKiri");
  for (jeda = 0; jeda < 1000; jeda++) {
    exitmenu();
    delay(1);
  }
  lcd.clear();
  lcd.setCursor(2, 0);
  lcd.print("Poltek ATMI");
  lcd.setCursor(1, 1);
  lcd.print("Menu 7 : StRPM");
  for (jeda = 0; jeda < 1000; jeda++) {
    exitmenu();
    delay(1);
  }
}

void exitmenu() {
  customKey = customKeypad.getKey();
  if (customKey) {
    push = 0;
    Serial.println(customKey);
    if (customKey == '0') {
      tekan = 0;
    }
    else if (customKey == '1') {
      tekan = 1;
    }
    else if (customKey == '2') {
      tekan = 2;
    }
    else if (customKey == '3') {
      tekan = 3;
    }
    else if (customKey == '4') {
      tekan = 4;
    }
    else if (customKey == '5') {
      tekan = 5;
    }
    else if (customKey == '6') {
      tekan = 6;
    }
    else if (customKey == '7') {
      tekan = 7;
    }
    else if (customKey == '8') {
      tekan = 8;
    }
    else if (customKey == '9') {
      tekan = 9;
    }
    else {
    }
  }
}

void button() {
  if (digitalRead(pbp) == HIGH) {
    push = 1;
  }
  else if (digitalRead(pbm) == HIGH) {
    push = 2;
  }
}

void lagu() {
  tone(buzz, note_5);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_3);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_1);
  for (jeda = 0; jeda < 300; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 50; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_1);
  for (jeda = 0; jeda < 300; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 50; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_1);
  for (jeda = 0; jeda < 300; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_1);
  for (jeda = 0; jeda < 150; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 50; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_1);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_7l);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_1);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_2);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 50; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_6);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_4);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_2);
  for (jeda = 0; jeda < 300; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 50; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_2);
  for (jeda = 0; jeda < 300; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 50; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_2);
  for (jeda = 0; jeda < 300; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_2);
  for (jeda = 0; jeda < 150; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 50; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_2);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_1);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_2);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_3);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 50; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_1);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_3);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_5);
  for (jeda = 0; jeda < 300; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 50; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_5);
  for (jeda = 0; jeda < 300; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 50; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_5);
  for (jeda = 0; jeda < 300; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_6);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_5);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_6);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_7);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_1u);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_1);
  for (jeda = 0; jeda < 150; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 50; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_1);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_6);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_5);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_4);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_3);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_2);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  tone(buzz, note_1);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  noTone(buzz);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
}

void ledrun() {
  digitalWrite(lr, HIGH);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  digitalWrite(lr, LOW);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  digitalWrite(ly, HIGH);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  digitalWrite(ly, LOW);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  digitalWrite(lg, HIGH);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
  digitalWrite(lg, LOW);
  for (jeda = 0; jeda < 200; jeda++) {
    exitmenu();
    delay(1);
  }
}

void ultra() {
  // Clears the trigPin condition
  digitalWrite(trigPin, LOW);
  delayMicroseconds(100);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  // Displays the distance on the Serial Monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
  lcd.setCursor(0, 1);
  lcd.print("Jarak : ");
  lcd.setCursor(9, 1);
  lcd.print(distance);
  lcd.setCursor(14, 1);
  lcd.print("cm");
  if (distance <= 5) {
    tone(buzz, 1500);
    digitalWrite(lr, HIGH);
    for (jeda = 0; jeda < 100; jeda++) {
      exitmenu();
      delay(1);
    }
    noTone(buzz);
    digitalWrite(lr, LOW);
    for (jeda = 0; jeda < 100; jeda++) {
      exitmenu();
      delay(1);
    }
  }
  else if (distance >= 15) {
    tone(buzz, 1500);
    digitalWrite(lg, HIGH);
    for (jeda = 0; jeda < 500; jeda++) {
      exitmenu();
      delay(1);
    }
    noTone(buzz);
    digitalWrite(lg, LOW);
    for (jeda = 0; jeda < 500; jeda++) {
      exitmenu();
      delay(1);
    }
  }
  else {
    tone (buzz, 1500);
    digitalWrite(ly, HIGH);
    for (jeda = 0; jeda < 250; jeda++) {
      exitmenu();
      delay(1);
    }
    noTone(buzz);
    digitalWrite(ly, LOW);
    for (jeda = 0; jeda < 250; jeda++) {
      exitmenu();
      delay(1);
    }
  }
}

void suhu() {
  // Wait a few seconds between measurements.
  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  float h = dht.readHumidity();
  // Read temperature as Celsius
  float t = dht.readTemperature();
  // Read temperature as Fahrenheit
  float f = dht.readTemperature(true);
  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t) || isnan(f)) {
    Serial.println("Failed to read from DHT sensor!");
    lcd.setCursor(4, 0);
    lcd.print("Menu : 4");
    lcd.setCursor(1, 1);
    lcd.print("Gagal Mengukur");
    return;
  }
  // Compute heat index
  // Must send in temp in Fahrenheit!
  float hi = dht.computeHeatIndex(f, h);
  lcd.setCursor(0, 1);
  lcd.print("Temp : ");
  lcd.setCursor(7, 1);
  lcd.print(t);
  lcd.setCursor(13, 1);
  lcd.print("*C");
  Serial.print("Humidity: ");
  Serial.print(h);
  Serial.print(" %\t");
  Serial.print("Temperature: ");
  Serial.print(t);
  Serial.print(" *C ");
  Serial.print(f);
  Serial.print(" *F\t");
  Serial.print("Heat index: ");
  Serial.print(hi);
  Serial.println(" *F");
  for (jeda = 0; jeda < 500; jeda++) {
    exitmenu();
    delay(1);
  }
}

void stepkanan() {
  //step 4
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, HIGH);
  for (jeda = 0; jeda < delaystepper; jeda++) {
    exitmenu();
    delay(1);
  }
  //step 3
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  for (jeda = 0; jeda < delaystepper; jeda++) {
    exitmenu();
    delay(1);
  }
  //step 2
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  for (jeda = 0; jeda < delaystepper; jeda++) {
    exitmenu();
    delay(1);
  }
  //step 1
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  for (jeda = 0; jeda < delaystepper; jeda++) {
    exitmenu();
    delay(1);
  }
}

void stepkiri() {
  //step 4
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  for (jeda = 0; jeda < delaystepper; jeda++) {
    exitmenu();
    delay(1);
  }
  //step 3
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  for (jeda = 0; jeda < delaystepper; jeda++) {
    exitmenu();
    delay(1);
  }
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  for (jeda = 0; jeda < delaystepper; jeda++) {
    exitmenu();
    delay(1);
  }
  //step 1
  //step 4
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, HIGH);
  for (jeda = 0; jeda < delaystepper; jeda++) {
    exitmenu();
    delay(1);
  }
}

void rpm() {
  while (push == 0) {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, LOW);
    button();
    exitmenu();
  }
  while (push == 1) {
    //kecepatan putaran 0 - 1023
    speedstep = analogRead(pot);
    // map it to a range from 0 to 100:
    int motorSpeed = map(speedstep, 0, 1023, 0, 100);
    // set the motor speed:
    if (motorSpeed > 0) {
      myStepper.setSpeed(motorSpeed / 2);
      // step 1/100 of a revolution:
      //cw
      myStepper.step(stepsPerRevolution / 100);
      lcd.clear();
      lcd.setCursor(4, 0);
      lcd.print("Menu : 6");
      lcd.setCursor(1, 1);
      lcd.print("CW    spd");
      lcd.setCursor(12, 1);
      lcd.print(motorSpeed);
      button();
      exitmenu();
    }
  }
  while (push == 2) {
    //kecepatan putaran 0 - 1023
    speedstep = analogRead(pot);
    // map it to a range from 0 to 100:
    int motorSpeed = map(speedstep, 0, 1023, 1, 100);
    // set the motor speed:
    if (motorSpeed > 0) {
      myStepper.setSpeed(motorSpeed / 2);
      // step 1/100 of a revolution:
      //ccw
      myStepper.step(-stepsPerRevolution / 100);
      lcd.clear();
      lcd.setCursor(4, 0);
      lcd.print("Menu : 6");
      lcd.setCursor(1, 1);
      lcd.print("CCW   spd");
      lcd.setCursor(12, 1);
      lcd.print(motorSpeed);
      button();
      exitmenu();
    }
  }
}
